{"version":3,"sources":["utils/message.ts","components/GoodCart/index.tsx","components/AddGood/index.tsx","components/Good/index.tsx","components/Navbar/index.tsx","flux/actions/cart.ts","api/cart.ts","flux/reducers/cart.ts","flux/actions/good.ts","api/good.ts","flux/reducers/good.ts","flux/reducers/index.ts","flux/index.ts","containers/index.ts","containers/Navbar.tsx","App.tsx","index.tsx","components/common/Button/index.tsx","components/common/Card/index.tsx"],"names":["messageSuccess","text","message","success","Good","id","name","price","quantity","deletetGood","title","actions","onClick","className","key","GoodSchema","Yup","shape","required","AddGood","createGood","initialValues","validationSchema","onSubmit","values","resetForm","handleChange","errors","touched","handleBlur","handleSubmit","isSubmitting","placeholder","onChange","onBlur","value","type","htmlType","incrementGood","addToCard","size","Navabar","goodsQuantity","to","goods","good","instance","axios","create","baseURL","withCredentials","headers","get","then","res","data","post","delete","initialState","getGoods","state","action","filter","g","dispatch","a","api","addGood","put","map","c","priceNumber","parseInt","quantityNumber","combineReducers","cart","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","thunk","_store","CartContainer","lazy","GoodsContainer","connect","length","App","Navbar","fallback","exact","path","render","ReactDOM","StrictMode","basename","process","document","getElementById","Button","children","rounded","cn","MyCard"],"mappings":"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","file":"static/js/main.098dc068.chunk.js","sourcesContent":["import { message } from \"antd\";\r\n\r\nexport const messageSuccess = (text: string) => message.success(text);\r\n","import React, { FC } from \"react\";\r\n\r\nimport { Card, Button } from \"../common\";\r\n\r\ntype IProps = {\r\n  id: number;\r\n  name: string;\r\n  price: number;\r\n  quantity: number;\r\n  deletetGood: (id: number) => void;\r\n};\r\n\r\nconst Good: FC<IProps> = ({ id, name, price, quantity, deletetGood }) => {\r\n  const onDeleteGood = () => deletetGood(id)\r\n\r\n  return (\r\n    <Card title={name} actions={[<Button onClick={onDeleteGood}className=\"button--danger\" key=\"delete\">Delete</Button>]}>\r\n      <ul>\r\n        <li>price: {price}$</li>\r\n        <li>puantity: {quantity}</li>\r\n      </ul>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default Good;\r\n","import React, { FC } from \"react\";\r\nimport { Formik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { Card, Input } from \"antd\";\r\n\r\nimport { IGood } from \"../../api/good\";\r\n\r\nimport { Button } from \"../../components/common\";\r\n\r\nimport \"./index.sass\";\r\n\r\ntype IProps = {\r\n  createGood: (name: string, price: string, quantity: string) => void;\r\n};\r\ntype IForm = {\r\n  name: string;\r\n  price: string;\r\n  quantity: string;\r\n};\r\nconst GoodSchema = Yup.object().shape({\r\n  name: Yup.string().required(\"Name is required\"),\r\n  price: Yup.string().required(\"Price is required\"),\r\n  quantity: Yup.string().required(\"Quantity is required\"),\r\n});\r\n\r\nconst AddGood: FC<IProps> = ({ createGood }) => {\r\n  const initialValues: IForm = { name: \"\", price: \"\", quantity: \"\" };\r\n  return (\r\n    <Card className=\"add-good--card\">\r\n      <Formik\r\n        initialValues={initialValues}\r\n        validationSchema={GoodSchema}\r\n        onSubmit={(values: IForm, { resetForm }) => {\r\n          createGood(values.name, values.price, values.quantity);\r\n          resetForm();\r\n        }}\r\n      >\r\n        {({\r\n          values,\r\n          errors,\r\n          touched,\r\n          handleChange,\r\n          handleBlur,\r\n          handleSubmit,\r\n          isSubmitting,\r\n        }) => (\r\n          <form className=\"add-good--form\" onSubmit={handleSubmit}>\r\n            <div className=\"field\">\r\n              <Input\r\n                name=\"name\"\r\n                placeholder=\"Name\"\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                value={values.name}\r\n              />\r\n            </div>\r\n            <div className=\"field\">\r\n              <Input\r\n                name=\"price\"\r\n                placeholder=\"Price\"\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                value={values.price}\r\n              />\r\n            </div>\r\n            <div className=\"field\">\r\n              <Input\r\n                name=\"quantity\"\r\n                placeholder=\"Quantity\"\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                value={values.quantity}\r\n              />\r\n            </div>\r\n            <div>\r\n              <Button type=\"primary\" htmlType=\"submit\">\r\n                Create\r\n              </Button>\r\n            </div>\r\n          </form>\r\n        )}\r\n      </Formik>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default AddGood;\r\n","import React, { FC } from \"react\";\r\n\r\nimport \"./index.sass\";\r\n\r\nimport { IGood } from \"../../api/good\";\r\n\r\nimport { Button, Card } from \"../common\";\r\n\r\ntype IProps = {\r\n  id: number;\r\n  name: string;\r\n  price: number;\r\n  quantity: number;\r\n  incrementGood: (good: IGood) => void;\r\n  deletetGood: (id: number) => void;\r\n  addToCard: (good: IGood) => void;\r\n};\r\n\r\nconst Good: FC<IProps> = ({\r\n  id,\r\n  name,\r\n  price,\r\n  quantity,\r\n  incrementGood,\r\n  deletetGood,\r\n  addToCard,\r\n}) => {\r\n  const onIncrement = () =>\r\n    incrementGood({ id, name, price, quantity: quantity += 1 });\r\n  const onDecrement = () =>\r\n    incrementGood({ id, name, price, quantity: quantity -= 1 });\r\n\r\n  const onAddToCard = () => addToCard({ id, name, price, quantity });\r\n\r\n  return (\r\n    <Card className=\"good-card\" title={name}>\r\n      <ul>\r\n        <li>price: {price}$</li>\r\n        <li>puantity: {quantity}</li>\r\n      </ul>\r\n      <div className=\"buttons__wrapper\">\r\n        <Button onClick={onDecrement} size=\"small\">\r\n          -\r\n        </Button>\r\n        <Button onClick={onIncrement} size=\"small\">\r\n          +\r\n        </Button>\r\n      </div>\r\n      <Button className=\"good-card--button\" onClick={onAddToCard}>\r\n        Add to Cart\r\n      </Button>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default Good;\r\n","import React, { FC } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Typography } from \"antd\";\r\n\r\nimport \"./index.sass\";\r\n\r\ntype IProps = { goodsQuantity: number };\r\nconst Navabar: FC<IProps> = ({ goodsQuantity }) => {\r\n  return (\r\n    <div className=\"navbar__wrapper\">\r\n      <div className=\"navbar\">\r\n        <Link to=\"/goods\" className=\"link\">\r\n        <Typography>Товары</Typography>\r\n      </Link>\r\n      <Link to=\"/cart\" className=\"link\">\r\n        <Typography>Корзина {goodsQuantity}</Typography>\r\n      </Link></div> \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Navabar;\r\n","import { IGood } from \"../../api/good\";\r\n\r\nexport default {\r\n  getGoods: (goods: Array<IGood>) => ({ type: \"CART/GET_GOODS\", goods } as const),\r\n  addGood: (good: IGood) => ({ type: \"CART/ADD_GOOD\", good } as const),\r\n  deleteGood: (id: number) => ({ type: \"CART/DELETE_GOOD\", id } as const),\r\n};\r\n","import axios from \"axios\";\r\n\r\nimport { IGood } from \"./good\";\r\n\r\nexport const instance = axios.create({\r\n  baseURL: \"https://my-json-server.typicode.com/AlesssArver/react-shopping-cart/cart\",\r\n  withCredentials: true,\r\n  headers: {\r\n    \"Content-Type\": \"application/json\",\r\n  },\r\n});\r\n\r\nexport default {\r\n  getGoods: () => {\r\n    return instance.get<Array<IGood>>(`/`).then((res) => res.data);\r\n  },\r\n  addGood: (good: IGood) => {\r\n    return instance\r\n      .post<Array<IGood>>(`/`, { ...good })\r\n      .then((res) => res.data);\r\n  },\r\n  deleteGood(id: number) {\r\n    return instance.delete(`${id}`).then((res) => res.data);\r\n  },\r\n};\r\n","import { InferActionsTypes, ThunkType } from \"../index\";\r\nimport { messageSuccess } from \"../../utils/message\";\r\nimport action from \"../actions/cart\";\r\nimport { IGood } from \"../../api/good\";\r\nimport api from \"../../api/cart\";\r\n\r\nconst initialState = {\r\n  goods: [] as Array<IGood>,\r\n};\r\ntype IState = typeof initialState;\r\ntype IActions = InferActionsTypes<typeof action>;\r\ntype T = ThunkType<IActions>;\r\n\r\nexport default (state = initialState, action: IActions): IState => {\r\n  switch (action.type) {\r\n    case \"CART/GET_GOODS\":\r\n      return {\r\n        ...state,\r\n        goods: action.goods,\r\n      };\r\n    case \"CART/ADD_GOOD\":\r\n      return {\r\n        ...state,\r\n        goods: [...state.goods, action.good],\r\n      };\r\n    case \"CART/DELETE_GOOD\":\r\n      return {\r\n        ...state,\r\n        goods: state.goods.filter((g) => g.id !== action.id),\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const getGoods = (): T => async (dispatch) => {\r\n  const data = await api.getGoods();\r\n  dispatch(action.getGoods(data));\r\n};\r\nexport const addGood = (good: IGood): T => async (dispatch) => {\r\n  await api.addGood(good);\r\n  dispatch(action.addGood(good));\r\n  messageSuccess(\"Good was added in cart\");\r\n};\r\nexport const deletetGood = (id: number): T => async (dispatch) => {\r\n  await api.deleteGood(id);\r\n  dispatch(action.deleteGood(id));\r\n  messageSuccess(\"Good was deleted from cart\");\r\n};\r\n","import { IGood } from \"../../api/good\";\r\n\r\nexport default {\r\n  getGoods: (goods: Array<IGood>) =>\r\n    ({ type: \"GOOD/GET_GOODS\", goods } as const),\r\n  createGood: (good: IGood) => ({ type: \"GOOD/CREATE_GOOD\", good } as const),\r\n  incrementGood: (good: IGood) =>\r\n    ({\r\n      type: \"GOOD/INCREMENT_GOOD\",\r\n      good,\r\n    } as const),\r\n  deleteGood: (id: number) => ({ type: \"GOOD/DELETE_GOOD\", id } as const),\r\n};\r\n","import axios from \"axios\";\r\n\r\nexport const instance = axios.create({\r\n  baseURL: \"https://my-json-server.typicode.com/AlesssArver/react-shopping-cart/goods\",\r\n  withCredentials: true,\r\n  headers: {\r\n    \"Content-Type\": \"application/json\",\r\n  },\r\n});\r\n\r\nexport type IGood = {\r\n  id: number;\r\n  name: string;\r\n  price: number;\r\n  quantity: number;\r\n};\r\n\r\nexport default {\r\n  getGoods: () => {\r\n    return instance\r\n      .get<Array<IGood>>(`?_sort=id&_order=desc`)\r\n      .then((res) => res.data);\r\n  },\r\n  createGood: (name: string, price: number, quantity: number) => {\r\n    return instance\r\n      .post(`/`, { name, price, quantity })\r\n      .then((res) => res.data);\r\n  },\r\n  incrementGood: (\r\n    id: number,\r\n    name: string,\r\n    price: number,\r\n    quantity: number\r\n  ) => {\r\n    return instance\r\n      .put(`${id}`, { name, price, quantity })\r\n      .then((res) => res.data);\r\n  },\r\n  deleteGood(id: number) {\r\n    return instance.delete(`${id}`).then((res) => res.data);\r\n  },\r\n};\r\n","import { InferActionsTypes, ThunkType } from \"../index\";\r\nimport { messageSuccess } from \"../../utils/message\";\r\nimport action from \"../actions/good\";\r\nimport api, { IGood } from \"../../api/good\";\r\n\r\nconst initialState = {\r\n  goods: [] as Array<IGood>,\r\n};\r\ntype IState = typeof initialState;\r\ntype IActions = InferActionsTypes<typeof action>;\r\ntype T = ThunkType<IActions>;\r\n\r\nexport default (state = initialState, action: IActions): IState => {\r\n  switch (action.type) {\r\n    case \"GOOD/GET_GOODS\":\r\n      return {\r\n        ...state,\r\n        goods: action.goods,\r\n      };\r\n    case \"GOOD/CREATE_GOOD\":\r\n      return {\r\n        ...state,\r\n        goods: [action.good, ...state.goods],\r\n      };\r\n    case \"GOOD/INCREMENT_GOOD\":\r\n      return {\r\n        ...state,\r\n        goods: state.goods.map((g) => {\r\n          if (g.id === action.good.id)\r\n            return {\r\n              ...g,\r\n              name: action.good.name,\r\n              price: action.good.price,\r\n              quantity: action.good.quantity,\r\n            };\r\n          return g;\r\n        }),\r\n      };\r\n    case \"GOOD/DELETE_GOOD\":\r\n      return {\r\n        ...state,\r\n        goods: state.goods.filter((c) => c.id !== action.id),\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const getGoods = (): T => async (dispatch) => {\r\n  const data = await api.getGoods();\r\n  dispatch(action.getGoods(data));\r\n};\r\nexport const createGood = (\r\n  name: string,\r\n  price: string,\r\n  quantity: string\r\n): T => async (dispatch) => {\r\n  const priceNumber = parseInt(price);\r\n  const quantityNumber = parseInt(quantity);\r\n  const data = await api.createGood(name, priceNumber, quantityNumber);\r\n  dispatch(action.createGood({ ...data }));\r\n  messageSuccess(\"Good was added\");\r\n};\r\nexport const incrementGood = (good: IGood): T => async (dispatch) => {\r\n  const data = await api.incrementGood(\r\n    good.id,\r\n    good.name,\r\n    good.price,\r\n    good.quantity\r\n  );\r\n  dispatch(action.incrementGood(data));\r\n};\r\nexport const deletetGood = (id: number): T => async (dispatch) => {\r\n  await api.deleteGood(id);\r\n  dispatch(action.deleteGood(id));\r\n  messageSuccess(\"Good was deleted\");\r\n};\r\n","import { combineReducers } from \"redux\";\r\n\r\nimport cart from \"./cart\";\r\nimport good from \"./good\";\r\n\r\nexport default combineReducers({ cart, good });\r\n","import { Action, applyMiddleware, compose, createStore } from \"redux\";\r\nimport thunk, { ThunkAction } from \"redux-thunk\";\r\n\r\nimport rootReducer from \"./reducers\";\r\n\r\ntype RootReducerType = typeof rootReducer;\r\nexport type IRootState = ReturnType<RootReducerType>;\r\nexport type InferActionsTypes<T> = T extends {\r\n  [key: string]: (...args: any[]) => infer U;\r\n}\r\n  ? U\r\n  : never;\r\nexport type ThunkType<A extends Action, R = Promise<void>> = ThunkAction<\r\n  R,\r\n  IRootState,\r\n  unknown,\r\n  A\r\n>;\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeEnhancers(applyMiddleware(thunk))\r\n);\r\n// @ts-ignore\r\nwindow._store = store;\r\n\r\nexport default store;\r\n","import { lazy } from 'react'\r\n\r\nexport const CartContainer = lazy(() => import('./Cart'))\r\nexport const GoodsContainer = lazy(() => import('./Good'))","import React, { FC } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { IGood } from \"../api/good\";\r\nimport { IRootState } from \"../flux\";\r\n\r\nimport { Navbar } from \"../components\";\r\n\r\nconst NavbarContainer: FC<IMapStateToProps> = ({ goods }) => {\r\n  return (\r\n    <>\r\n      <Navbar goodsQuantity={goods.length} />\r\n    </>\r\n  );\r\n};\r\n\r\ntype IMapStateToProps = {\r\n  goods: Array<IGood>;\r\n};\r\nconst MapStateToProps = (state: IRootState): IMapStateToProps => ({\r\n  goods: state.cart.goods,\r\n});\r\nexport default connect(MapStateToProps)(NavbarContainer);\r\n","import React, { Suspense } from 'react'\nimport { BrowserRouter, Redirect, Route, Switch, withRouter } from 'react-router-dom'\n\nimport { CartContainer, GoodsContainer } from \"./containers\";\nimport NavbarContainer from \"./containers/Navbar\";\n\nconst App = () => {\n  return (\n    <div className=\"main__container\">\n      <NavbarContainer />\n       <Suspense fallback={<h1>Loading . . .</h1>}>\n        <Switch>\n          <Route exact path=\"/\" render={() => <Redirect to=\"/goods\" />} />\n          <Route path=\"/cart\" render={() => <CartContainer />} />\n          <Route path=\"/goods\" render={() => <GoodsContainer />} />\n          <Route path='*' render={() => <div>404 Not Found</div>}/>\n        </Switch>\n      </Suspense>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\n\nimport store from \"./flux\";\n\nimport \"./assets/styles/index.sass\";\n\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","import React, { FC } from \"react\";\r\nimport { Button as BaseButton } from \"antd\";\r\nimport cn from \"classnames\";\r\n\r\nimport \"./index.sass\";\r\n\r\ntype IProps = {\r\n  children: React.ReactNode;\r\n  type?: \"link\" | \"text\" | \"ghost\" | \"default\" | \"primary\" | \"dashed\";\r\n  htmlType?: \"button\" | \"submit\" | \"reset\";\r\n  onClick?: (e: React.MouseEvent<HTMLElement>) => void;\r\n  className?: string;\r\n  size?: string;\r\n  rounded?: boolean;\r\n};\r\n\r\nconst Button: FC<IProps> = ({\r\n  children,\r\n  type,\r\n  htmlType,\r\n  className,\r\n  size,\r\n  onClick,\r\n  rounded,\r\n}) => (\r\n  <BaseButton\r\n    onClick={onClick}\r\n    className={cn(\"button\", className, {\r\n      \"button--large\": size === \"large\",\r\n      \"button--medium\": size === \"medium\",\r\n      \"button--small\": size === \"small\",\r\n      \"button--rounded\": rounded,\r\n    })}\r\n    type={type}\r\n    htmlType={htmlType}\r\n  >\r\n    {children}\r\n  </BaseButton>\r\n);\r\nexport default Button;\r\n","import React, { FC } from \"react\";\r\nimport { Card } from \"antd\";\r\nimport cn from \"classnames\";\r\n\r\nimport \"./index.sass\";\r\n\r\ntype IProps = {\r\n  children: React.ReactNode;\r\n  className?: string;\r\n  title?: string;\r\n  actions?: Array<any>;\r\n};\r\nconst MyCard: FC<IProps> = ({ children, className, title, actions }) => {\r\n  return (\r\n    <Card title={title} className={cn('card', className)} actions={actions}>\r\n      {children}\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default MyCard;\r\n"],"sourceRoot":""}